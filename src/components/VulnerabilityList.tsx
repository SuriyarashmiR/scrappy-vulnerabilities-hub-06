
import React, { useState, useEffect } from 'react';
import VulnerabilityCard, { Vulnerability } from './VulnerabilityCard';
import { cn } from '@/lib/utils';

interface CompanyData {
  id: string;
  name: string;
  logo: string;
  grade: string;
  vulnerabilities: Vulnerability[];
}

const companiesData: CompanyData[] = [
  {
    id: '1',
    name: 'Windows',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Windows_logo_-_2012.svg/1024px-Windows_logo_-_2012.svg.png',
    grade: 'Grade E',
    vulnerabilities: [
      { id: '1-1', type: 'warning', description: 'Windows stores your data whether you have an account or not.' },
      { id: '1-2', type: 'warning', description: 'The service can read your private messages' },
      { id: '1-3', type: 'warning', description: 'This service can view your browser history' },
      { id: '1-4', type: 'warning', description: 'Deleted content is not really deleted' },
      { id: '1-5', type: 'info', description: 'This service keeps user logs for an undefined period of time' },
    ]
  },
  {
    id: '2',
    name: 'NVIDIA',
    logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Nvidia_logo.svg/1024px-Nvidia_logo.svg.png',
    grade: 'Grade E',
    vulnerabilities: [
      { id: '2-1', type: 'info', description: 'Third-party cookies are used for advertising' },
      { id: '2-2', type: 'info', description: 'Terms may be changed any time at their discretion, without notice to the user' },
      { id: '2-3', type: 'info', description: 'This service tracks you on other websites' },
      { id: '2-4', type: 'info', description: 'The service can delete your account without prior notice and without a reason' },
      { id: '2-5', type: 'info', description: 'Voice data is collected and shared with third-parties' },
    ]
  }
];

interface VulnerabilityListProps {
  title?: string;
  globalExpanded?: boolean;
  onExpandChange?: (expanded: boolean) => void;
}

const VulnerabilityList: React.FC<VulnerabilityListProps> = ({ 
  title, 
  globalExpanded,
  onExpandChange 
}) => {
  const [expanded, setExpanded] = useState(false);
  
  // Sync local expanded state with global state when it changes
  useEffect(() => {
    if (globalExpanded !== undefined) {
      setExpanded(globalExpanded);
    }
  }, [globalExpanded]);

  const handleExpandToggle = () => {
    const newExpandedState = !expanded;
    setExpanded(newExpandedState);
    
    // Notify parent component about the state change
    if (onExpandChange) {
      onExpandChange(newExpandedState);
    }
  };

  return (
    <div className="w-full max-w-6xl mx-auto animate-fade-up rounded-xl p-4 bg-white dark:bg-gray-800/60 shadow-sm border border-gray-100 dark:border-gray-700">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {companiesData.map((company, index) => (
          <VulnerabilityCard
            key={company.id}
            company={company.name}
            logo={company.logo}
            grade={company.grade}
            vulnerabilities={company.vulnerabilities}
            animationDelay={0.1 * index}
            forceExpanded={expanded}
          />
        ))}
      </div>
    </div>
  );
};

export default VulnerabilityList;
